// <auto-generated />
using System;
using Helpdesk;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Helpdesk.Migrations
{
    [DbContext(typeof(HelpdeskDbContext))]
    partial class HelpdeskDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Helpdesk.Models.ChatMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("IssueId")
                        .HasColumnType("bigint");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Helpdesk.Models.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte[]>("FileContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("IssueId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Helpdesk.Models.Issue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AssigneeId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<long>("RequesterId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("RequesterId");

                    b.ToTable("Issues", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AssigneeId = 3L,
                            CreatedDate = new DateOnly(2025, 7, 1),
                            Description = "Uživatel hlásí, že se nemůže přihlásit do systému.",
                            DueDate = new DateOnly(2025, 7, 7),
                            Priority = 2,
                            RequesterId = 2L,
                            Status = 0,
                            Title = "Problém s přihlášením"
                        },
                        new
                        {
                            Id = 2L,
                            AssigneeId = 3L,
                            CreatedDate = new DateOnly(2025, 7, 2),
                            Description = "Firma nahlásila špatně spočítanou fakturu.",
                            DueDate = new DateOnly(2025, 8, 20),
                            Priority = 1,
                            RequesterId = 1L,
                            Status = 1,
                            Title = "Chyba ve fakturaci"
                        },
                        new
                        {
                            Id = 3L,
                            AssigneeId = 1L,
                            CreatedDate = new DateOnly(2025, 7, 1),
                            Description = "Zaměstnanec požaduje nové pracovní zařízení.",
                            DueDate = new DateOnly(2025, 8, 20),
                            Priority = 0,
                            RequesterId = 3L,
                            Status = 3,
                            Title = "Požadavek na nové zařízení"
                        },
                        new
                        {
                            Id = 4L,
                            AssigneeId = 3L,
                            CreatedDate = new DateOnly(2025, 6, 15),
                            Description = "Požadavek, který byl již vyřešen.",
                            DueDate = new DateOnly(2025, 6, 30),
                            Priority = 1,
                            RequesterId = 2L,
                            Status = 3,
                            Title = "Vyřízený požadavek"
                        },
                        new
                        {
                            Id = 5L,
                            AssigneeId = 3L,
                            CreatedDate = new DateOnly(2025, 6, 20),
                            Description = "Požadavek, který ještě čeká na vyřízení.",
                            DueDate = new DateOnly(2025, 7, 5),
                            Priority = 2,
                            RequesterId = 1L,
                            Status = 1,
                            Title = "Nevyřízený požadavek"
                        },
                        new
                        {
                            Id = 6L,
                            AssigneeId = 3L,
                            CreatedDate = new DateOnly(2025, 6, 20),
                            Description = "Požadavek, který ještě čeká na vyřízení.",
                            DueDate = new DateOnly(2025, 7, 5),
                            Priority = 2,
                            RequesterId = 1L,
                            Status = 1,
                            Title = "Nevyřízený pož. s vyřízenými SubIssues"
                        });
                });

            modelBuilder.Entity("Helpdesk.Models.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdentificationNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsApplicationAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CompanyName = "Testovací Firma s.r.o.",
                            Email = "firma@example.com",
                            IdentificationNumber = 12345678,
                            IsApplicationAdmin = false,
                            PersonType = 1
                        },
                        new
                        {
                            Id = 2L,
                            DateOfBirth = new DateOnly(1985, 5, 20),
                            Email = "jan.novak@example.com",
                            FirstName = "Jan",
                            IsApplicationAdmin = true,
                            LastName = "Novák",
                            PersonType = 0
                        },
                        new
                        {
                            Id = 3L,
                            DateOfBirth = new DateOnly(1990, 8, 15),
                            Email = "petr.svoboda@example.com",
                            FirstName = "Petr",
                            IsApplicationAdmin = false,
                            LastName = "Svoboda",
                            PersonType = 0
                        });
                });

            modelBuilder.Entity("Helpdesk.Models.SubIssue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<long>("IssueId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.ToTable("SubIssues", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Uživatel požádal o reset hesla.",
                            DueDate = new DateOnly(2025, 7, 3),
                            IsDone = true,
                            IssueId = 1L,
                            Title = "Reset hesla"
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Zkontrolovat chyby v autentizaci v logu.",
                            DueDate = new DateOnly(2025, 7, 4),
                            IsDone = false,
                            IssueId = 1L,
                            Title = "Zkontrolovat logy"
                        },
                        new
                        {
                            Id = 3L,
                            Description = "Zkontrolovat a vyčistit stará data.",
                            DueDate = new DateOnly(2025, 6, 20),
                            IsDone = true,
                            IssueId = 4L,
                            Title = "Vyčistit data"
                        },
                        new
                        {
                            Id = 4L,
                            Description = "Pro jistotu provést zálohu.",
                            DueDate = new DateOnly(2025, 6, 25),
                            IsDone = true,
                            IssueId = 4L,
                            Title = "Zálohovat systém"
                        },
                        new
                        {
                            Id = 5L,
                            Description = "Získat všechny informace od klienta.",
                            DueDate = new DateOnly(2025, 7, 1),
                            IsDone = false,
                            IssueId = 5L,
                            Title = "Připravit podklady"
                        },
                        new
                        {
                            Id = 6L,
                            Description = "Nastavit přidělené zařízení dle požadavků.",
                            DueDate = new DateOnly(2025, 7, 3),
                            IsDone = false,
                            IssueId = 5L,
                            Title = "Nakonfigurovat zařízení"
                        },
                        new
                        {
                            Id = 7L,
                            Description = "Získat všechny informace od klienta.",
                            DueDate = new DateOnly(2025, 7, 1),
                            IsDone = true,
                            IssueId = 6L,
                            Title = "Připravit podklady"
                        },
                        new
                        {
                            Id = 8L,
                            Description = "Nastavit přidělené zařízení dle požadavků.",
                            DueDate = new DateOnly(2025, 7, 3),
                            IsDone = true,
                            IssueId = 6L,
                            Title = "Nakonfigurovat zařízení"
                        });
                });

            modelBuilder.Entity("Helpdesk.Models.ChatMessage", b =>
                {
                    b.HasOne("Helpdesk.Models.Issue", "Issue")
                        .WithMany("Chat")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Helpdesk.Models.Person", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Helpdesk.Models.Document", b =>
                {
                    b.HasOne("Helpdesk.Models.Issue", "Issue")
                        .WithMany("Documents")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("Helpdesk.Models.Issue", b =>
                {
                    b.HasOne("Helpdesk.Models.Person", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Helpdesk.Models.Person", "Requester")
                        .WithMany()
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assignee");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("Helpdesk.Models.SubIssue", b =>
                {
                    b.HasOne("Helpdesk.Models.Issue", "Issue")
                        .WithMany("SubIssues")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("Helpdesk.Models.Issue", b =>
                {
                    b.Navigation("Chat");

                    b.Navigation("Documents");

                    b.Navigation("SubIssues");
                });
#pragma warning restore 612, 618
        }
    }
}
