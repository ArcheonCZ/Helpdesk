@page "/"
@page "/issues"
@page "/issues/filter/{filter}"
@attribute [StreamRendering]
@inject IIssueManager IssueManager
@rendermode InteractiveServer

<PageTitle>Issues</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Issues</h1>
    <div class="pe-4">
    <NavLink href="/issues/form" class="btn btn-primary">New</NavLink>
    </div>
</div>

@if (issues == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <IssueTable Issues="@issues" OnIssueDeleted="@ReloadIssues" />
}

@code {
    [Parameter]
    public string filter { get; set; } = "";
    private IList<IssueDTO> issues = new List<IssueDTO>();

    protected override async Task OnParametersSetAsync()
    {
        await ReloadIssues();
    }
    private async Task ReloadIssues()
    {
        Console.WriteLine("ReloadIssues voláno! filter: "+filter);
        issues = filter switch
        {
            "overdue" => await IssueManager.GetAllOverdue(),
            "overduesub" => await IssueManager.GetAllWithOverdueSubIssue(),
            "unresolved" => await IssueManager.GetAllUnresolved(),
            _ => await IssueManager.GetAll()
        };
        
        StateHasChanged();
    }
}
