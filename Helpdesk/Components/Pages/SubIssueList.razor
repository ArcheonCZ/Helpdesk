@inject IIssueManager IssueManager
@rendermode InteractiveServer

@if (subIssues.Count == 0)
{
    <p>Žádné podúkoly.</p>
}
else
{
    <ul>
        @foreach (var sub in subIssues)
        {
            <li>
                <input type="checkbox" checked="@sub.IsDone" @onchange="() => ToggleSubIssueDone(sub.Id)" />
                <b>@sub.Title</b> – @sub.DueDate.ToString("d")
                <br />
                @sub.Description
            </li>
        }
    </ul>
}
<br />

<div class="d-flex justify-content-between align-items-center mb-3">
    <h5 class="mb-0">Add new subissue</h5>
    <button type="submit" form="SubIssueForm" class="btn btn-primary">Add</button>
</div>

<EditForm Model="@newSubIssue" OnValidSubmit="@AddSubIssue" FormName="SubIssueForm" id="SubIssueForm">
    <div class="container-fluid p-0">
        <div class="row gx-3">
            <div class="col">
                <InputText @bind-Value="newSubIssue.Title" class="form-control" placeholder="Title" />
            </div>
            <div class="col-auto">
                <InputDate @bind-Value="newSubIssue.DueDate" class="form-control" />
            </div>
        </div>

        <div class="mt-3">
            <InputTextArea @bind-Value="newSubIssue.Description"
                           class="form-control"
                           rows="3"
                           placeholder="Description" />
        </div>
    </div>
</EditForm>





@code {

    [Parameter] public uint IssueId { get; set; }
    private IList<SubIssueDTO> subIssues = new List<SubIssueDTO>();
    private SubIssueDTO newSubIssue = new SubIssueDTO();

    protected override async Task OnInitializedAsync()
    {
        await LoadSubIssues();
        newSubIssue.IssueId = IssueId; // naplnit rovnou správné ID
        newSubIssue.DueDate = DateOnly.FromDateTime(DateTime.Now);
    }

    private async Task LoadSubIssues()
    {
        subIssues = await IssueManager.GetAllSubissues(IssueId);
    }

    private async Task AddSubIssue()
    {
        try
        {
            Console.WriteLine($"Title: {newSubIssue.Title}, DueDate: {newSubIssue.DueDate}");
            await IssueManager.CreateSubIssue(newSubIssue);
            Console.WriteLine("IssueId předávané SubIssue: " + IssueId);
            newSubIssue = new SubIssueDTO { IssueId = IssueId }; // reset formuláře
            await LoadSubIssues();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Chyba při přidání subissue: " + ex.Message);
            // případně zobrazit UI chybovou hlášku
        }
    }

    private async Task ToggleSubIssueDone(uint subIssueId)
    {
        await IssueManager.ToggleSubIssueDone(subIssueId);
        await LoadSubIssues();
        StateHasChanged();
    }
}
